@use 'sass:map';
@use 'sass:color';
@use 'sass:string';
@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

@function dec-to-hex($d) {
  $hexVals: 'A' 'B' 'C' 'D' 'E' 'F';
  $base: 16;
  $quotient: $d;
  $result: '';

  @if $d == 0 {
    $result: '00';
  }

  @while $quotient != 0 {
    $mod: $quotient % $base;
    $quotient: math.floor(calc($quotient / $base));
    @if $mod > 9 {
      $mod: list.nth($hexVals, $mod - 9);
    }
    @if $d < $base {
      $result: '0' + $mod;
    } @else {
      $result: $mod + $result;
    }
  }

  @return $result;
}

@function rgba-hex($color, $alpha) {
  $alpha-value: round($alpha * 255);
  $alpha-hex: dec-to-hex($alpha-value);

  $red-hex: dec-to-hex(color.channel($color: $color, $channel: 'red'));
  $green-hex: dec-to-hex(color.channel($color: $color, $channel: 'green'));
  $blue-hex: dec-to-hex(color.channel($color: $color, $channel: 'blue'));
  
  @return '##{$red-hex}#{$green-hex}#{$blue-hex}#{$alpha-hex}';
}

@mixin generate-vars($colors, $prefix, $mode: 'light') {
  @each $key, $value in $colors {
    @if meta.type-of($value) == 'map' {
      @if map.has-key($value, 'light') and map.has-key($value, 'dark') {
        $color-value: map.get($value, $mode);

        @if meta.type-of($color-value) == 'map' and map.has-key($color-value, 'light') and map.has-key($color-value, 'dark') {
          @if $mode == 'light' {
            --#{$prefix}-#{'' + $key}: #{map.get($color-value, 'light')};
          } @else {
            --#{$prefix}-#{'' + $key}: #{map.get($color-value, 'dark')};
          }
        } @else {
          --#{$prefix}-#{'' + $key}: #{$color-value};
        }

      } @else {
        @include generate-vars($value, '#{$prefix}-#{'' + $key}', $mode);
      }
    } @else {
      --#{$prefix}-#{'' + $key}: #{$value};
    }
  }
}
